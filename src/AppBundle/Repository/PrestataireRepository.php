<?php

namespace AppBundle\Repository;

use AppBundle\Entity\CategorieDeServices;
use AppBundle\Entity\Prestataire;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * PrestataireRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PrestataireRepository extends EntityRepository
{

    public function findAllWithEverything()
    {
        return $this->searchAll(null,'','');
    }

    public function findOneWithEverythingBySlug($slug)
    {
        $qb = $this->createQueryBuilder('p');
        $this->addAllJoins($qb);

        $qb->where('p.slug =:slug');
        $qb->setParameter('slug', $slug);

        $qb->orderBy('p.nom', 'ASC');

        $query = $this->returnQuery($qb);
        return $this->returnSingleResult($query);
    }

    public function findAllWithEverythingByCateg(CategorieDeServices $categ)
    {
        $qb = $this->createQueryBuilder('p');
        $this->addBasicJoins($qb);
        $qb->leftJoin('p.codePostal', 'cp')->addSelect('cp');
        $qb->leftJoin('p.localite', 'localite')->addSelect('localite');

        $qb->join('p.categories', 'c', 'WITH', $qb->expr()->eq('c.id', $categ->getId()));
        $qb->orderBy('p.nom', 'ASC');

        $query = $this->returnQuery($qb);
        return $this->returnResult($query);

    }

    public function findNMostRecentBasic(int $n)
    {
        $qb = $this->createQueryBuilder('p');
        $this->addAllJoins($qb);

        $qb->orderBy('p.inscription', 'DESC');
        $qb->setMaxResults(4);
        $pag = new Paginator($qb);
        return $pag;

    }

    public function searchAll($categorie,$localite,$motcle)
    {
        $qb = $this->createQueryBuilder('p');
        $this->addBasicJoins($qb);


        if (!is_null($categorie)){
            $qb->join('p.categories','c','WITH',$qb->expr()->in('c.id',$categorie));
        }else{
            $qb->leftJoin('p.categories','categories')->addSelect('categories');
        }

        if (!empty($localite)){
            $qb->join('p.localite','l','WITH', $qb->expr()->eq('l.id',$localite));
        }else{
            $qb->leftJoin('p.localite','localite')->addSelect('localite');
        }
        $qb->leftJoin('p.codePostal','cp')->addSelect('cp');

        if(!empty($motcle)){
            $mc = "%".$motcle."%";
            $qb->add('where', $qb->expr()->like('p.nom','?1'));
            $qb->setParameter(1,$mc);

        }

        $qb->orderBy('p.nom', 'ASC');
        $query = $this->returnQuery($qb);

        return $query;
    }

    //fonction pas très utile mais qui existe pour des raisons de lisibilité

    protected function returnQuery($qb)
    {
        $query = $qb->getQuery();
        return $query;
    }

    protected function returnResult($query)
    {
        $result = $query->getResult();
        return $result;
    }

    protected function returnSingleResult($query)
    {
        $result = $query->getSingleResult();
        return $result;
    }


    protected function addAllJoins($qb)
    {
        $this->addBasicJoins($qb);

        $qb->leftJoin('p.categories', 'categories')->addSelect('categories');
        $qb->leftJoin('p.codePostal', 'cp')->addSelect('cp');
        $qb->leftJoin('p.localite', 'localite')->addSelect('localite');
    }

    //ajoute les joins moins ceux concerner par les recherche etc
    protected function addBasicJoins($qb)
    {
        $qb->leftJoin('p.stages', 'stages')->addSelect('stages');
        $qb->leftJoin('p.promotions', 'promotions')->addSelect('promotions');
        $qb->leftJoin('p.photos', 'photos')->addSelect('photos');
        $qb->leftJoin('p.logo', 'logo')->addSelect('logo');
        $qb->leftJoin('p.internautesFavoris', 'fav')->addSelect('fav');
    }


}