<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Prestataire;
use Doctrine\ORM\EntityRepository;

/**
 * PrestataireRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PrestataireRepository extends EntityRepository
{

    public function findAllWithEverithing()
    {
        $qb = $this->createWithJoin();

        return $this->returnResult($qb);
    }

    public function findOneWithEverithingBySlug($slug)
    {
        $qb = $this->createWithJoin();

        $qb->where('p.slug =:slug');
        $qb->setParameter('slug',$slug);

        return $this->returnSingleResult($qb);
    }

    public function findAllWithEverithingByCateg($categ){
        $qb = $this->createWithJoin();

        $qb->add('where',$qb->expr()->in('p.categorie', ':categ'));
        $qb->setParameter('categ',$categ);

        return $this->returnResult($qb);

    }



    protected function createWithJoin()
    {
        $qb = $this->createQueryBuilder('p');
        $this->addJoins($qb);
        return $qb;
    }

    protected function returnResult($qb)
    {
        $query= $qb->getQuery();
        $result=$query->getResult();
        return $result;
    }

    protected function returnSingleResult($qb)
    {
        $query= $qb->getQuery();
        $result=$query->getSingleResult();
        return $result;
    }






    public function findWithEverithing($type,$key)
    {
        //creation du QB
        $qb = $this->createQueryBuilder('p');

        //ajout de jointures
        $this->addJoins($qb);

        if (isset($key)){
            $this->addWhere($qb,$type,$key);
        }

        $query= $qb->getQuery();

        if ($type == 'slug')// if true -> j'essaye d'afficher un seul prestataire
        {
            $result=$query->getSingleResult();
        }else{
            $result=$query->getResult();
        }

        return $result;
    }



    protected function addWhere($qb,$type,$key)
    {
        switch ($type)
        {
            case 'slug':
                $qb->where('p.slug =:key');
                $qb->setParameter('key',$key);
                break;
        }
    }

    protected function addJoins($qb)
    {
        $qb->leftJoin('p.stages','stages')->addSelect('stages');
        $qb->leftJoin('p.promotions','promotions')->addSelect('promotions');
        $qb->leftJoin('p.photos','photos')->addSelect('photos');
        $qb->leftJoin('p.logo','logo')->addSelect('logo');
        $qb->leftJoin('p.categories','categories')->addSelect('categories');
        $qb->leftJoin('p.internautesFavoris','fav')->addSelect('fav');
    }







//
//    public function getCote(Prestataire $prestataire)
//    {
//        $query = $this->getEntityManager()->createQuery("SELECT (AVG(c.cote)/5) cote FROM AppBundle:Commentaire c WHERE c.cibleCommentaire = ?1");
//        $query->setParameter(1,$prestataire);
//        $result = $query->getResult();
//
//        return $result;
//    }

    //test








    //exemple en class

    public function findAllWithStages()
    {
        $qb = $this->createQueryBuilder('p');
        $qb->join('p.stages','stages');
        $query= $qb->getQuery();
        $result=$query->getResults();
        return $result;
    }
//
//    protected function addJoins($qb)
//    {
//        $qb->join('p.promos','promos');
//        $qb->join('p.stages','stages');
//        $qb->join('p.categories','cat');
//    }

    public function finAllWithJoins()
    {
        $qb = $this->createQueryBuilder('p');
        $this->addJoins($qb);
        $query=$qb->getQuery();
        $results=$query->getResult();
        return $results;
    }

    public function findOneWithJoins($id,$date)
    {
        $qb = $this->createQueryBuilder('p');
        $this->addJoins($qb);
        $qb->where('p.id =:id');
        $qb->setParameter('id',$id);

        $qb->andWhere('p.date>:date');

        $qb->innerJoin('p.stages','stages','WITH','stages.date >:date');
        $qb->setParameter('date',$date);

        $query=$qb->getQuery();
        $results=$query->getResult();
        return $results;
    }


}
